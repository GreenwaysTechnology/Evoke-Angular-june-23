			   Angular 


What is Angular?

  Angular is UI framework to build Single Page web apps

Core concepts:
1.Angular is object oriented
    Angular is written in typescript.
2.Angular objects are two types
    -InfraStructure objects - Modules,Components,Services,Directives,Pipes...
    -Domain Objects - Customer,Products,Payments....

3.Angular infra objects not created by the developer using    
    let mycomponent = new MyComponent()
  Angular internally uses "DI" subsystem which creates objects for us

4.Angular is built on 
   =>MVC Design pattern...

....................................................................................
				How to setup Angular project
.....................................................................................

in order to setup project and to manage project work flows, like compilation, building project for production,testing...
We need a tool - angular cli tool.

Installation:
npm install -g @angular/cli

How to test the tool has been installed or not?
>ng --help
ng <command>

Commands:
  ng add <collection>            Adds support for an external library to your project.
  ng analytics                   Configures the gathering of Angular CLI usage metrics.
  ng build [project]             Compiles an Angular application or library into an output directory named dist/ at
                                 the given output path.                                                   [aliases: b]
  ng cache                       Configure persistent disk cache and retrieve cache statistics.
  ng completion                  Set up Angular CLI autocompletion for your terminal.
  ng config [json-path] [value]  Retrieves or sets Angular configuration values in the angular.json file for the
                                 workspace.
  ng deploy [project]            Invokes the deploy builder for a specified project or for the default project in the
                                 workspace.
  ng doc <keyword>               Opens the official Angular documentation (angular.io) in a browser, and searches for
                                 a given keyword.                                                         [aliases: d]
  ng e2e [project]               Builds and serves an Angular application, then runs end-to-end tests.    [aliases: e]
  ng extract-i18n [project]      Extracts i18n messages from source code.
  ng generate                    Generates and/or modifies files based on a schematic.                    [aliases: g]
  ng lint [project]              Runs linting tools on Angular application code in a given project folder.
  ng new [name]                  Creates a new Angular workspace.                                         [aliases: n]
  ng run <target>                Runs an Architect target with an optional custom builder configuration defined in
                                 your project.
  ng serve [project]             Builds and serves your application, rebuilding on file changes.          [aliases: s]
  ng test [project]              Runs unit tests in a project.                                            [aliases: t]
  ng update [packages..]         Updates your workspace and its dependencies. See https://update.angular.io/.
  ng version                     Outputs Angular CLI version.                                             [aliases: v]


Basic Angular Project/App Structure


folders
 -node_modules
    all angular libs @angular @somethiing
 -src
    Application code will go here

files
 package.json - project information like dep,scripts
 
ts config -files
  -ts.config - core configuration
  -tsconfig.app.json - app specific compiler conf
  -tsconfig.spec.json  -testing related compiler conf


angular.json.
  angular project automated by webpack,but we cant see any webpack.config.js file.
 angular.json file is proxy file for webpack.

 -app related configuration
  
App folder structure

 src
  |
  app
    -will have basic application code
  assets
  env
 index.html
 main.ts - entry file for app
 polyfills.ts - browser specific libs
 styles.css - global css
 test.ts - basic unit testing file
.....................................................................................

How to run default dev server?

npm start

Open Browser 
http://localhost:4200
....................................................................................
Exploring Project files and folders

folders
 -e2e
    end to end testing information - e2e framework is protractor.
 -node_modules
    all angular libs @angular @somethiing

 -src
    Application code will go here

files
 package.json - project information like dep,scripts
 
ts config -files
  -ts.config - core configuration
  -tsconfig.app.json - app specific compiler conf
  -tsconfig.spec.json  -testing related compiler conf

tslint.json 
   config information for tslint tool.
   static code analysis using tslint tool


angular.json.
  angular project automated by webpack,but we cant see any webpack.config.js file.
 angular.json file is proxy file for webpack.

 -app related configuration
  
karma.config.json
    Unit testing configuration files


App folder structure

 src
  |
  app
    -will have basic application code
  assets
  env
 index.html
 main.ts - entry file for app
 polyfills.ts - browser specific libs
 styles.css - global css
 test.ts - basic unit testing file


Angular Work Flow:

eg:
  http://www.example.com ------index.html
  http://localhost:4200----->index.html

Flow of Angular:

1.index.html
    browser will try to construct inital tree,JS engine initalize the DOM Tree---->Angular Engine will kick start --> will initalize the App.

2.browser loads angular js files in order

<script src="runtime.js" type="module"></script>
    -Angular Runtime
<script src="polyfills.js" type="module"></script>
    -browser specific libs
<script src="styles.js" defer></script>
    -css styles are loaded
<script src="vendor.js" type="module"></script>
    -angular framework and thrid party libs and apis

<script src="main.js" type="module"></script>
    -Your app will be loaded

 main.ts(js)
    |
     --->app.module.ts(app.module.js)
            |
            -----app.component.ts(app.component.js)
                     |
                     <app-root> content will be displayed


Note:
  This is flow and file Names are default by convention, incase if want to change files name like from main.ts to foo.ts, you have to edit 

angular.json 
tsconfig-app.json 

main.ts
  It is entry point to intialize the application.


import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

import { AppModule } from './app/app.module';


platformBrowserDynamic().bootstrapModule(AppModule)
  .catch(err => console.error(err));


Angular APIS:
  All angular related apis are kept inside "@angular/subfolder"

@angular/core  -package
@angular/platform-browser-dynamic -package
   Which has basic browser features
....................................................................................
				Angular Modularity
....................................................................................

Breaking app into smaller and smaller
.....................................................................................
			Angular Application structure
.....................................................................................

Angular apps are collection of objects 

			   Object
			     |
            ----------------------------------------
            Container                          non Container
               |

Container object contains other other objects including another container- Module Object
Like java packages, package container other packages called sub package.

Container object is other wise called "Module Object".


Modularity In Angular:

Types of modularity in angular

1.ES 6 modules -Physical modularity
   sharing code between files
 export,export default,import..

export class ProductService{}

import {ProductService} from './product.service'

2.Angular modules - Logical modularity
 
 Object contains other objects

    "Every ng app must have one single container module called "app module".

First app module must be loaded, then all sub modules will be loaded.
....................................................................................
	
				Root View/Page


AppComponent.ts

 It is file which creates DOM tree , Which will render first 


import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'my-first-project';
}
.....................................................................................
..............................................................................................
				Angular Infra Structure Objects
..............................................................................................

Angular infra objects

1.module
2.component
3.service
4.directive
5.pipes

Note : 
  in ng we never create infra object using new keyword
ng depedency injector will create object , we use it.

How to create angular infra objects / How to identify this object is module/component?

Using decorators. Angular provides lot of decorators

Built in decorators
 Component 
 ContentChild 
 ContentChildren
 Directive Host 
 HostBinding
 HostListener
 Inject 
 Injectable 
 Input
 NgModule
 Optional 
 Output 
 Pipe
 Self
 SkipSelf 
 ViewChild 
 ViewChildren
.....................................................................................
...........................................................................
				App Module

=>It is entry module for any angular app.
=>Root container object 
=>App Module will have instructions that how to create objects- DI patterns

Note:
 In angular we never create objects(infra objects)
 Angular uses a pattern "IOC" /Dependency Injection pattern
 Angular behind the scene uses a program through which only objects are created.

lets assume if you declare a class

export class Hello {

}
do you think that angular will create object for Hello automatically.
 No!
How to teach angular , that create object for this class.

Ans:
  Via Configuration, we have to tell angular 

Where this configuration is mentioned?
 
 Inside any module (main or submodule)

configurations 

@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule
  ],
  providers: [],
 
})

Types of classes/Objects in the angular

1.View Objects
   Component,Directive,Pipe - any class decorated with @component or @Directive @Pipe
2.Module(sub Module) Objects
   any class which is decorated with @NgModule
3.Services
   Any class which is decorated with @Injectable

 declarations:[] 
    contains view Objects(Component,Directive,Pipe)
 imports:[],
     contains submodule objects
 providers:[]
     contains service objects

bootstrap:
   which is root object(view object)

....................................................................................
			  App Structure


<div>
   <header></header>
   <main></main>
   <footer></footer>
</div>

index.html
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Gettingstarted</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
</head>
<body>
  <app-root>
    	<app-header>
		<header></header>
	</app-header>
  </app-root>
</body>
</html>

.....................................................................................

import { Component } from "@angular/core";


@Component({
    selector: 'app-header', // the html tag Name 
    template: `
        <h1>Header</h1>
    `
})
export class HeaderComponent {

}

Component configuration:
 selector :
    The name of the html tag or widget Name
 template:
    which contains html markup

Template Types:
 1.inline template
     template is declarated as part of the component
 template: `
        <h1>Header</h1>
    `
 2.external template
    create template in a separate html file
   header.component.html

import { Component } from "@angular/core";


@Component({
    selector: 'app-header', // the html tag Name 
    // template: `
    //     <h1>Header</h1>
    // `
    templateUrl: 'header.component.html'
})
export class HeaderComponent {

}

2.declare component inside main module
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { AppComponent } from './app.component';
import { HeaderComponent } from './header/header.component';


@NgModule({
  declarations: [
    AppComponent,
    HeaderComponent
  ],
  imports: [
    BrowserModule  //sub module to AppModule //browserModule has basic browser features
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }

3.Refer the component app.component.html
<div>
  <app-header></app-header>
</div>
....................................................................................

Assigment:
 Create Footer Component 
 Create Main Component 
Display inside AppComponent
.....................................................................................
			Sub Modules
..................................................................................

When you create components, we need organize the components according to domain

your-app
  src
   |
   header
    |
    header.component.ts
    header.component.html
    header.module.ts
   products
   customers
   invoice
 app.module.ts
app.component.ts     
 
Steps:

1.create header module

src/header/header.module.ts
import { NgModule } from '@angular/core'
import { HeaderComponent } from './header.component';

@NgModule({
    declarations: [HeaderComponent],
    imports: [],
    providers: [],
    exports: [HeaderComponent]
})
export class HeaderModule { }

2.inject header module into main module
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { AppComponent } from './app.component';
import { HeaderModule } from './header/header.module';

@NgModule({
  declarations: [
    AppComponent,   
  ],
  imports: [
    BrowserModule,  
    HeaderModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }

Assigment:
 Create Footer Component 
 Create Main Component 
update this using submodules
...................................................................................
			 Angular Coding style
...................................................................................
 Angular coding best pratices -Angular Style Guide

https://angular.io/guide/styleguide


File structure conventions:
...........................
->file must follow the domain model.

product:
 Ng has lot of infra objects (module,component,pipe,services...)

component:
 It has so many files
 .ts file
    component file
    component spec file -  unit testing file
 .html file
 .css file

header.component.ts | spec.ts | .html | .css

header.component.ts
header.component.html
header.component.css
header.component.spec.ts

Modules
 header.module.ts


style guide for file names

domainname.component|service|directive|pipe.ts

hero.component.ts
hero.service.ts
hero.directive.ts
hero.pipe.ts

Custom elements Naming convention:Component selectors

 <app-root> - recommended
  
 <approot>  - not recommended.

Do use dashed-case or kebab-case for naming the element selectors of components.

Should i use always app?
 Not Necessary
app is default prefix, it can be changed - angular.json file

evoke-root
evoke-customer
evoke-product
.....................................................................................class Names:

 1.Noun
 2.should be meaningfull
 3.should have suffix component,service,directive,pipe

 HeaderComponent
 HeaderService
 HeaderDirective
 HeaderPipe
				Modularization
....................................................................................

Every angular apps must be modularized.

-es 6 modules
   folders
     -files

-angular modules
    organization of objects

src
  |
 app
  you must have only root files
  app.component.ts
  app.module.ts
 |
 customer
   |
   customer component
   customer module
   customer service
   customer pipe

Use case:
  -header
  -footer
  -body

Component design prototype:

  <body>
	<app-root>
		<app-header></app-header>
	</app-root>
  </body>
.....................................................................................


Steps to create Component

1.declare componenent class
2.declare component html 
3.write component logic
4.dependency injection inside moudle
5.refer the compoent inside template.


import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { AppComponent } from './app.component';
import { HeaderComponent } from './header/header.component';

@NgModule({
  declarations: [
    AppComponent,HeaderComponent
  ],
  imports: [
    BrowserModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }

import { Component } from "@angular/core";


@Component({
    selector: 'app-header',
    templateUrl:'header.component.html'
})
export class HeaderComponent {

}

app.component.html
<div>
    <app-header></app-header>
</div>

The components we create should not be injected inside root module.- we have to always create sub module and where we have to inject, and that sub module must be injected into main module.

 Object creation order

  app.module.ts----> submodule---->components


src/app/app.module.ts
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { AppComponent } from './app.component';
import { HeaderModule } from './header/header.module';
// import { HeaderComponent } from './header/header.component';

@NgModule({
  declarations: [
    // AppComponent,HeaderComponent
    AppComponent
  ],
  imports: [
    BrowserModule,HeaderModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }


src/header/header.module.ts
import { NgModule } from '@angular/core'
import { HeaderComponent } from './header.component';

@NgModule({
    declarations: [HeaderComponent],
    imports: [],
    providers: []
})
export class HeaderModule {

}
after running this code, still we have error

error: src/app/app.component.html:2:5 - error NG8001: 'app-header' is not a known element:
1. If 'app-header' is an Angular component, then verify that it is part of this module.
2. If 'app-header' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.


Reason:

if you refer, the component from the current module outside module, we cant access, the component is private scope..

How to make it public?

exports:
  options

import { NgModule } from '@angular/core'
import { HeaderComponent } from './header.component';

@NgModule({
    declarations: [HeaderComponent],
    imports: [],
    providers: [],
    exports:[HeaderComponent] //what are the components to be available outside this module
})
export class HeaderModule {

}

Problems in the dev flow:

Tasks:

1.create folder
2.create files - component-ts,html,css,spec
3.create module
4.declare class -cmp,service...
5.refer the classes inside module
6.you need to inject submodule into main module..

DRY

if you repeate the same thing for every object , which increases lot of time.
....................................................................................
Automation:
 code generation automation

angular cli tool to generate code.

Generates and/or modifies files based on a schematic.

ng generate <schematic> [options]
ng g <schematic> [options]
			
..........................................................................................................................................................................
			 		MVC overview
.....................................................................................

Angular is MVC framework.

M- Model - State
V -View - Template
C -Controller - Component.

State : Data
In Angular state can represented 

primitives
objects
arrays

controller === component

.............................................................................................
Data binding:
 Transfering state to ui(view)  from the component(controller), View to Controller

Types of databinding
1.interpolation
2.property binding
3.attribute binding
4.event binding
5.two way data binding
6.class binding
7.style binding
.....................................................................................

In order to show databinding and mvc i will create new project

ng  new mvc-databinding

>cd mvc-databinding

mvc-databinding> code .

mvc-databinding>npm start

1.interpolation:
 
   Transfering data from the controller to View(Template).

Data:
  Data can be string,number,boolean,object,array

Where we can declare data?
  ->Inside controller  - Inside component.

Use Case:
  How to display user information?

Steps:
1.create module 
2.create component
3.inject user component into user module
4.inject usermodule into app module.


E:\session\Evoke\mvc-databinding>ng g m user --module=app
CREATE src/app/user/user.module.ts (190 bytes)
UPDATE src/app/app.module.ts (379 bytes)


E:\session\Evoke\mvc-databinding>ng g c user/user --module=user --export=true --flat=true
CREATE src/app/user/user.component.html (19 bytes)
CREATE src/app/user/user.component.spec.ts (545 bytes)
CREATE src/app/user/user.component.ts (194 bytes)
CREATE src/app/user/user.component.css (0 bytes)
UPDATE src/app/user/user.module.ts (297 bytes)


app.component.html
<div>
  <h1>MVC and Data Binding Examples</h1>
  <hr/>
  <h1>Interpolation:User component</h1>
  <app-user></app-user>
</div>
...

How to declare data?
user.type.ts
export class User {
    id: number | undefined |0
    name?: string | undefined
    status?: boolean
    address?: {
        city?: string
    }
}

user.component.ts
import { Component } from '@angular/core';
import { User } from './user.type';

@Component({
  selector: 'app-user',
  templateUrl: './user.component.html',
  styleUrls: ['./user.component.css']
})
export class UserComponent {
  //model-data : primitive
  userId: number = 100
  userName: string = 'Subramanian'
  status: boolean = true
  //object
  user:User = {
    id: 1,
    name: 'Robert',
    status: true,
    address: {
      city: 'New york'
    }
  }
}

user.component.html
<div>
    <h2>User details</h2>
    <h3>Id {{userId}} </h3>
    <h3>Name {{userName}}</h3>
    <h3>Status {{status ? "Available" : "Not Available"}}</h3>
    <div>
        <h2>Id {{user?.id}}</h2>
        <h2>Name {{user?.name}}</h2>
        <h3>Status {{user?.status}}</h3>
        <!-- ?. which is called null replacer if city is not available which will replace empty string -->
        <h3>City {{user.address?.city}}</h3>

    </div>
</div>
....................................................................................
			   List or Array
....................................................................................

How to display array of something?

=>We need array
=>We need to display array.
   in order to display of array of something we need to iterate array.

Angular provides template based iterator : Directives

Syntax:
   <ul>
        <li *ngFor="let product of products">
            <span>{{product.id}}</span>
        </li>
    </ul>

eg:
app/products/products.component.ts
import { Component } from '@angular/core';
import { PRODUCTS } from './products.mock-data';

@Component({
  selector: 'app-products',
  templateUrl: './products.component.html',
  styleUrls: ['./products.component.css']
})
export class ProductsComponent {
    //list of products
    products:Array<any> = PRODUCTS
}

mockdata : please refer repository

products.component.html
<div>
    <h2>Product Details</h2>
    <div *ngFor="let product of products ">
        <p>id {{product.id}}</p>
        <p>title {{product.title}}</p>
        <p>Description {{product.description}}</p>
        <p>Category {{product.category}}</p>
        <img src={{product.image}} />
        <p>Rating {{product.rating.rate}}</p>
    </div>
</div>
.....................................................................................
			    Service layer
....................................................................................

In MVC data should not be kept in the controller(component), rather we have to keep data and biz logic inside another object called "Service"

Service just a class , must be decorated with "@Injectable"

@Injectable()
export class ProductService {

}

Inside module we have to inject 

declarations: [Components]
imports:[SubModules]
providers[Services]

Create new Project:

ng new mvc-service

cd mvc-service

Steps:

/products/product.service.ts
import { Injectable } from "@angular/core";

@Injectable()
export class ProductService {

}

Declare ProductService inside module with provider configuration
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ProductsComponent } from './products.component';
import { ProductService } from './products.service';



@NgModule({
  declarations: [
    ProductsComponent
  ],
  imports: [
    CommonModule
  ],
  exports: [
    ProductsComponent
  ],
  providers:[ProductService]
})
export class ProductsModule { }

Dependency Injection:
 ProductComponent has ProductService...
import { Component } from '@angular/core';
import { ProductService } from './products.service';

@Component({
  selector: 'app-products',
  templateUrl: './products.component.html',
  styleUrls: ['./products.component.css']
})
export class ProductsComponent {
  //variable to hold products data
  // products: Array<any> | undefined
  // products: Array<any> = []; //empty array default value

  //skip compiler errors from "uninitalization"
  products!: Array<any>;

  constructor(private productService: ProductService) {
    this.products = this.productService.findAll()
  }
}

Short cut for providers:
  //providers:[ProductService]

you dont need to inject services with providers configuration

Inside Service class itself you can alter.

import { Injectable } from "@angular/core";
import { PRODUCTS } from "./products.mock-data";

@Injectable({ providedIn: 'root' })
export class ProductService {

    //apis 
    public findAll(): Array<any> {
        return PRODUCTS
    }
}
.....................................................................................
			Data initalization/ service api calls
.....................................................................................

@Component({
  selector: 'app-products',
  templateUrl: './products.component.html',
  styleUrls: ['./products.component.css']
})
export class ProductsComponent {
  //variable to hold products data
  // products: Array<any> | undefined
  // products: Array<any> = []; //empty array default value

  //skip compiler errors from "uninitalization"
  products!: Array<any>;

  constructor(private productService: ProductService) {
    this.products = this.productService.findAll()
  }
}

here you can notice the code gets initalized inside constructor which is not recommended.
.....................................................................................
			  Component Life Cycles
.....................................................................................

Life cycles are methods which are called automatically when componets gets initalized


This is method which is called after compoent is ready to render

ngOnInit(): void {
    this.products = this.productService.findAll()
}
ngOnInit method is used to initalze api calls 

import { Component, OnInit } from '@angular/core';
import { ProductService } from './products.service';

@Component({
  selector: 'app-products',
  templateUrl: './products.component.html',
  styleUrls: ['./products.component.css']
})
export class ProductsComponent implements OnInit {
  //variable to hold products data
  // products: Array<any> | undefined
  // products: Array<any> = []; //empty array default value

  //skip compiler errors from "uninitalization"
  products!: Array<any>;

  constructor(private productService: ProductService) {
    // this.products = this.productService.findAll()
  }
  ngOnInit(): void {
    this.products = this.productService.findAll()
  }
}
....................................................................................
				Service Types
.....................................................................................

Async Programming:

Async programming without blocking current thread, tasks are executed in the background in the kernal.
Once the operation is completed , kernal will send the data to main thread.

Javascript is since single threaded, it has implemented async programming features.

Implementation:

1.callback style - pure js style, it is core style.
2.Promise Style - It is abstraction on callbacks, to abstract complexity of                   callbacks we use promises.

3.Promises with async ...await - it is simplified version of Promises
..................................................................................
			  Advanced async programming

Promises generally has notation of "fire and forget" model.

                           Services - Reactive Programming
				 Using rxjs
.....................................................................................	

What is Reactive Programming?
 An API for asynchronous programming with observable streams

Reactive Programming is not new approach to write modern apps, but it is old, collective ideas in one place.

Reactive Programming concepts

1.Async programming
2.Data Streaming
3.Event driven Programming  

 Rx = {async,data streaming,event driven Programming}

Reactive programming is similar design patterns , we need implmentation.

Every programming language has "extension" with Reactive - ReactiveX

Java:
   -Rxjava
   -Project Reactor
   -Mutiny
Js:
   -RXJS

Angular uses rxjs internally for building advanced stream based async, event driven programming model

Reactive Programming has been implemented with three major principles

1.Observable Design Pattern -  Event Driven programming
2.functional programming principles - enables declarative programming.
3.iterator design pattern - push based iterator.
.............................................................................................
Core concepts:

Core concepts:

1.Publisher
   Publisher is object who publishes the data(events)

2.Subscriber
  Subscriber is object who listens for the data(events


Publisher---publish data(event)-----|-----|----|-------Subscriber
                                     Stream
                                    |     |    |
                               operator operator operator


3.Operators
   Operators are apis or methods or function which creates and process the stream.

4.Stream
    flow of data
....................................................................................
				Angular and rx js
1.Service is Publisher
2.Component is Subscriber or Listener

Objects:

Observable: represents the idea of an invokable collection of future values or events.

Observer: is a collection of callbacks that knows how to listen to values delivered by the Observable.

Subscription: represents the execution of an Observable, is primarily useful for cancelling the execution.

Operators: are pure functions that enable a functional programming style of dealing with collections with operations like map, filter, concat, reduce, etc.

Subject: is equivalent to an EventEmitter, and the only way of multicasting a value or event to multiple Observers.

Schedulers: are centralized dispatchers to control concurrency, allowing us to coordinate when computation happens on e.g. setTimeout or requestAnimationFrame or others.
.....................................................................................

What value we can stream?
  Stream any value including primitives,arrays,collections,promises.....

Steps:
1.create Stream
   -From scratch
	
   -Using operators

Any stream can emit three types of event

1.data event - emits data
2.error event - emits error
3.complete event - emits complete
.....................................................................................
Eg:

service
import { Injectable } from '@angular/core';
import { PRODUCTS } from './products.mock-data';
import { Observable, map, of, from, filter } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class ProductsService {

  constructor() { }

  //async api
  // findAll(): Observable<any> {
  //   //return products
  //   // return PRODUCTS  //Observable
  //   return new Observable(subscriber => {
  //     //emit data 
  //     subscriber.next(PRODUCTS)
  //     subscriber.complete()
  //   })
  // }
  // findAll(): Observable<any[]> {
  //   //of is operator which returns stream of data
  //   return of(PRODUCTS)
  // }
  //stream processing
  findAll(): Observable<any[]> {
    //of is operator which returns stream of data
    return from(PRODUCTS).pipe(
      //data processing/streaming logic
      filter(item => {
        return item.category === 'jewelery'
      })
    )
  }
}

//product.component.ts

import { Component, OnInit } from '@angular/core';
import { ProductsService } from './products.service';
import { Observable } from 'rxjs';

@Component({
  selector: 'app-products',
  templateUrl: './products.component.html',
  styles: [
  ]
})
export class ProductsComponent implements OnInit {
  //! - it is ts feature to avoid variable initalization
  products: Array<any> =[]
  constructor(private productService: ProductsService) {

  }
  ngOnInit() {
    // this.products = this.productService.findAll()
    this.productService.findAll().subscribe({
      //data event
      next: product => {
        console.log(product)
        //this.products = products
        this.products.push(product)

      }
    })
  }
}
product.component.html
<div>
    <div *ngFor="let product of products">
        <h1>Category {{product.category}}</h1>
        <h2>{{product.id}}</h2>
        <h2>{{product.title}}</h2>
        <h2>Price {{product.price}}</h2>
    </div>
</div>
....................................................................................
			 Connecting to REST API Back end
....................................................................................
				HTTP Programming using Rxjs
.....................................................................................

Most of the front end applications need to communicate with a server over the HTTP protocal to download and upload data and access the back end services.

Angular provides a client HTTP APi called "HttpClient" built in service class.

HttpClient service class has been listed in the module "@angular/common/http"  HttpClientModule.

This has to be injected into the module where you need to interact with http service.

Steps:

1.server rest api
  -java
  -c#
  -python
  -php
  -node

we are going to use third party fake api

https://fakestoreapi.com/products

.......

products/product.type.ts
export class Product {
    id!: number
    title!: string
    price!: number
    description?: string
    category?: string
    image?: string
    rating?: {
        rate: number
        count: number
    }
}

products/product.service.ts

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http'
import { Product } from './product.type'
import { Observable } from 'rxjs'

@Injectable({
  providedIn: 'root'
})
export class ProductsService {
  
  constructor(private http: HttpClient) { }

  findAll(): Observable<Product[]> {
    //talk to back end service
    const url = 'https://fakestoreapi.com/products'
    return this.http.get<Product[]>(url)
  }
}

import { Component } from '@angular/core';
import { ProductsService } from './products.service';
import { Product } from './product.type';

@Component({
  selector: 'app-products',
  templateUrl: './products.component.html',
  styles: [
  ]
})
export class ProductsComponent {
  products!: Array<Product>

  constructor(private productService: ProductsService) { }
  ngOnInit() {
    this.productService.findAll().subscribe({
      next: products => {
        console.log(products)
        this.products = products
      }
    })
  }
}
//product.component.html

<div *ngFor="let product of products">
    <h1>Category {{product.category}}</h1>
    <h2>{{product.id}}</h2>
    <h2>{{product.title}}</h2>
    <h2>Price {{product.price}}</h2>
</div>
.....................................................................................
			How to handle HTTP errors
....................................................................................

instead of throwing error, we can convert into meanful response, so that app never crash.

catchError
  Catches errors on the observable to be handled by returning a new observable or throwing an error.


import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http'
import { Product } from './product.type'
import { Observable, catchError, of } from 'rxjs'

@Injectable({
  providedIn: 'root'
})
export class ProductsService {

  constructor(private http: HttpClient) { }

  findAll(): Observable<Product[]> {
    //talk to back end service
    const url = 'https://fakestoreapi.com/products'
    return this.http.get<Product[]>(url).pipe(
      catchError(this.handleError<Product[]>('fetchProducts', [{ id: 0, title: 'title', price: 0.0 }]))
    )
  }
  //private method
  //handle error Api
  private handleError<T>(operation = 'operation', result?: T) {
    //return function
    return (error: any): Observable<T> => {
      console.log(error)
      return of(result as T)
    }
  }
}
.....................................................................................
			UI Features - Data formating -Pipes
.....................................................................................
What is pipe?
 pipe object used for data formating.

eg:
 show uppercase
 show money values - $,#,
 show date format  - 1/10/2021 , feb 10 2021...
 custom formates

Angular provides lot of built in pipes, you can write your own pipes as well.
....
Syntax:
  some data | nameof the pipe.

Pipe with Input :
  some data | nameof the pipe:input

Builtin pipes:

DatePipe: Formats a date value according to locale rules.

UpperCasePipe: Transforms text to all upper case.

LowerCasePipe: Transforms text to all lower case.

CurrencyPipe: Transforms a number to a currency string, formatted according to locale rules.

DecimalPipe: Transforms a number into a string with a decimal point, formatted according to locale rules.

PercentPipe: Transforms a number to a percentage string, formatted according to locale rules.

asyncPipe : to bind list of values async
   - used to bind observables directly.

JsonPipe: to show object in json format

eg:
<div>

</div>
<!-- async pipe :used to bind observable directly -->
<div *ngFor="let product of products | async">
    {{product | json}}
    <h1>Today (US Format) : {{today | date}} Today (Indian Format) : {{today | date:'dd/MM/yy'}}</h1>
    <h1>{{product.category | titlecase}}</h1>
    <h2>{{product.id}}</h2>
    <h2>{{product.title | uppercase}}</h2>
    <h2>Price(USD) {{product.price | currency}} - Price(INR) {{product.price | currency:'INR'}} </h2>
</div>
















